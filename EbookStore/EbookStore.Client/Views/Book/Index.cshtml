@using EbookStore.Client.Helper;
@using EbookStore.Client.RefitClient;
@using EbookStore.Contract.ViewModel.Pagination;
@using EbookStore.Contract.ViewModel.Book.BookQueryRequest;
@using EbookStore.Contract.ViewModel.Book.BookResponse;
@using EbookStore.Contract.ViewModel.Genre.Response;
@using Newtonsoft.Json;
@using Refit;
@inject IBookClient _bookClient;
@inject IHttpContextAccessor HttpContextAccessor;
@inject IGenreClient _genreClient;
@model BookQueryRequest

@{
    var session = HttpContextAccessor.HttpContext.Session;
    UserManager userManager = new UserManager(this.User);
    List<BookResponse> data = new List<BookResponse>();
    PaginationHeader paginationHeader = null;

    List<GenreResponse> genresResponse = await _genreClient.GetAsync();
    var pageNumber = int.Parse(session.GetString("PageNumber_BookIndex"));
    var pageSize = int.Parse(session.GetString("PageSize_BookIndex"));
    var title = session.GetString("Title_BookIndex");
    var startReleaseDate = DateTime.Parse(session.GetString("StartReleaseDate_BookIndex"));
    var endReleaseDate = DateTime.Parse(session.GetString("EndReleaseDate_BookIndex"));
    List<int> genres = new List<int>();

    string genresString = session.GetString("Genres_BookIndex");
    if (!String.IsNullOrEmpty(genresString))
    {
        int spaceIndex = genresString.IndexOf(' ');

        // loop while there are more spaces in string
        while (spaceIndex != -1)
        {
            // add value to list
            int value = int.Parse(genresString.Substring(0, spaceIndex));
            genres.Add(value);

            // move along string and find next space in string
            genresString = genresString.Substring(spaceIndex + 1);
            spaceIndex = genresString.IndexOf(' ');
        }
    }

    if (userManager.IsLogin())
    {
        var token = userManager.GetToken();
        BookQueryRequest queryRequest = new BookQueryRequest
                {
                    PageNumber = pageNumber,
                    PageSize = pageSize,
                    Title = title,
                    Genres = genres,
                    StartReleaseDate = startReleaseDate,
                    EndReleaseDate = endReleaseDate
                };
        ApiResponse<List<BookResponse>> response
                    = await _bookClient.GetResponseAsync(queryRequest);
        string headerString = await response.GetPaginationHeader();
        paginationHeader = JsonConvert.DeserializeObject<PaginationHeader>(headerString);
        data = response.ReadResult();
    }
}

<head>
    <title>Book</title>
    <style>
        body {
            margin-top: 50px;
        }

        table {
            border-collapse: collapse;
            width: 70%;
            margin-left: 30%;
        }

        th,
        td {
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2
        }

        th {
            background-color: #ffc107;
            color: white;
        }

        .btn {
            border: none;
            background-color: #ffc107;
            color: white;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: auto
        }

        .btn-edit {
            background-color: #008CBA;
            width: 70px;
            line-height: 20px;
        }

        .btn-delete {
            background-color: #f44336;
            width: 70px;
            line-height: 20px;
        }

        .btn-create {
            margin-top: 50px;
        }

        .search-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 25%;
            float: left;
            margin-left: 2%;
            margin-top: 20px;
            justify-content: center; 
        }

        .search-box {
            padding: 8px;
            border: 1px solid #b9b3b3;
            border-radius: 4px;
            width: 100%;
            margin-right: 10px;
        }

        .mt-100 {
            margin-top: 100px
        }


        .pagination {
            display: flex;
            justify-content: right;
            margin-top: 20px;
        }

            .pagination button {
                margin: 0 10px;
                background-color: #ffc107;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                cursor: pointer;
            }

                .pagination button:hover {
                    background-color: #006a8e;
                }

                .pagination button:disabled {
                    background-color: grey;
                }
    </style>
</head>

<body>
    <div class="search-container">
        <form asp-controller="Book" asp-action="Search" method="post">
            <input name="title" type="text" class="search-box" placeholder="Search..." />
            <label>Start Date</label>
            <input name="start" class="search-box" type="date" />
            <label>End Date</label>
            <input name="end" class="search-box" type="date" />
            <label>Genre</label>
            <select name="genres" class="search-box" multiple>
                @foreach (GenreResponse genre in genresResponse)
                {
                    <option value=@genre.GenreId>@genre.Name</option>
                }
            </select>
            <button type="submit">Search</button>
            <br />
            <a asp-controller="Book" asp-action="Create" class="btn btn-create">
                New Book +
            </a>
        </form>
    </div>

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Price</th>
                <th>Sale</th>
                <th>Pages</th>
                <th>Description</th>
                <th>Release Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (BookResponse book in data)
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@(book.Title.Length>15 ? book.Title.Substring(0,15)+"..." : book.Title)</td>
                    <td>@book.Price</td>
                    <td>@book.SalePercent%</td>
                    <td>@book.NumberOfPage</td>
                    <td>@(book.Description.Length>20 ? book.Description.Substring(0,20)+"..." : book.Description)</td>
                    <td>@book.ReleaseDate.ToString("dd-MM-yyyy")</td>
                    <td>
                        
                        <form asp-controller="Book" asp-action="Delete" method="post">
                            <input type="hidden" name="bookId" value="@book.Id" />
                            <button type="submit" class="btn btn-delete">Delete</button>
                        </form>
                        <a asp-controller="Book" asp-action="Update" asp-route-id=@book.Id class="btn btn-edit">
                            Update
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <form asp-controller="Book" asp-action="ChangePage" method="post">
            <input hidden name="pageNumber"
                   value="@(paginationHeader.CurrentPage-1)" />
            <button disabled="@(!paginationHeader.HasPrevious)">Previous</button>
        </form>

        <form asp-controller="Book" asp-action="ChangePage" method="post">
            <input hidden name="pageNumber"
                   value="@(paginationHeader.CurrentPage+1)" />
            <button disabled="@(!paginationHeader.HasNext)">Next</button>
        </form>
    </div>
</body>



