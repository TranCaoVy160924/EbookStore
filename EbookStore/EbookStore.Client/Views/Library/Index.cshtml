@using EbookStore.Client.Helper;
@using EbookStore.Client.RefitClient;
@using EbookStore.Contract.ViewModel.Pagination;
@using EbookStore.Contract.ViewModel.LibraryItem.Request;
@using EbookStore.Contract.ViewModel.LibraryItem.Response;
@using Newtonsoft.Json;
@using Refit;
@inject ILibraryClient _librarylient;
@inject IHttpContextAccessor HttpContextAccessor;
@model LibraryItemQueryRequest

@{
    var session = HttpContextAccessor.HttpContext.Session;
    UserManager userManager = new UserManager(this.User);
    List<LibraryItemResponse> data = new List<LibraryItemResponse>();
    PaginationHeader paginationHeader = null;
    LibraryItemQueryRequest libraryItemQueryRequest = new LibraryItemQueryRequest();

    var pageNumber = int.Parse(session.GetString("PageNumber_BookIndex"));
    var pageSize = int.Parse(session.GetString("PageSize_BookIndex"));
    var title = session.GetString("Title_BookIndex");

    if (userManager.IsLogin())
    {
        var token = userManager.GetToken();
        LibraryItemQueryRequest queryRequest = new LibraryItemQueryRequest
                {
                    PageNumber = pageNumber,
                    PageSize = pageSize,
                    Title = title,
                };
        ApiResponse<List<LibraryItemResponse>> response = await _librarylient.GetResponseAsync(queryRequest, token);
        string headerString = await response.GetPaginationHeader();
        paginationHeader = JsonConvert.DeserializeObject<PaginationHeader>(headerString);
        data = response.ReadResult();
    }
}



<head>
    <title>Library</title>
    <style>
        body {
            margin-top: 50px;
        }

        table {
            border-collapse: collapse;
            width: 70%;
            margin-left: 30%;
        }

        th,
        td {
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2
        }

        th {
            background-color: #ffc107;
            color: white;
        }

        .btn {
            border: none;
            background-color: #ffc107;
            color: black;
            padding: 6px 12px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
        }

        .btn-edit {
            background-color: #008CBA;
        }

        .btn-delete {
            background-color: #f44336;
        }

        .search-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 25%;
            float: left;
            margin-left: 2%;
            margin-top: 20px;
        }

        .search-box {
            padding: 8px;
            border: 1px solid #b9b3b3;
            border-radius: 4px;
            width: 100%;
            margin-right: 10px;
        }

        .mt-100 {
            margin-top: 100px
        }


        .pagination {
            display: flex;
            justify-content: right;
            margin-top: 20px;
        }

            .pagination button {
                margin: 0 10px;
                background-color: #ffc107;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                cursor: pointer;
            }

                .pagination button:hover {
                    background-color: #006a8e;
                }

                .pagination button:disabled {
                    background-color: grey;
                }
    </style>
</head>

<body>

    @{
        int counter = (paginationHeader.CurrentPage - 1) * 10 + 1;
    }
    <table>
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Title</th>
                <th>Price</th>
                <th>Cover Image</th>
                <th>Download</th>
            </tr>
        </thead>
        <tbody>
            @foreach (LibraryItemResponse book in data)
            {
                <tr>
                    <td>@counter</td>
                    <td>@(book.Title.Length > 15 ? book.Title.Substring(0, 15) + "..." : book.Title)</td>
                    <td>@book.Price</td>
                    <td>@book.CoverImage</td>
                    <td>
                        <form asp-controller="Library" asp-action="DownloadEbook">
                            <button type="submit" name="fileName"
                                value="@book.PdfLink" class="btn btn-edit">
                                PDF
                            </button>
                        </form>
                    </td>
                </tr>
                counter++;
            }
        </tbody>
    </table>
    <div class="pagination">
        <form asp-controller="Library" asp-action="ChangePage" method="post">
            <input hidden name="pageNumber"
                   value="@(paginationHeader.CurrentPage-1)" />
            <button disabled="@(!paginationHeader.HasPrevious)">Previous</button>
        </form>

        <form asp-controller="Library" asp-action="ChangePage" method="post">
            <input hidden name="pageNumber"
                   value="@(paginationHeader.CurrentPage+1)" />
            <button disabled="@(!paginationHeader.HasNext)">Next</button>
        </form>
    </div>
</body>



