// <auto-generated />
using System;
using EbookStore.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EbookStore.Data.Migrations
{
    [DbContext(typeof(EbookStoreDbContext))]
    [Migration("20230116104045_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksBookID")
                        .HasColumnType("int");

                    b.Property<int>("GenresGenreID")
                        .HasColumnType("int");

                    b.HasKey("BooksBookID", "GenresGenreID");

                    b.HasIndex("GenresGenreID");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("423e533c-d43d-4fd9-9676-e31af724522a"),
                            ConcurrencyStamp = "18df5d38-f263-44dd-8559-467b1c7a433d",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19"),
                            ConcurrencyStamp = "2f424691-f36a-44d3-8d6b-0b8c3daf50b4",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"), 1L, 1);

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpubLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPage")
                        .HasColumnType("int");

                    b.Property<string>("PdfLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SaleID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.HasIndex("SaleID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            CoverImage = "cover 1",
                            EpubLink = "EpubLink1",
                            IsActive = true,
                            NumberOfPage = 100,
                            PdfLink = "PdfLink 1",
                            Price = 10.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 97, DateTimeKind.Local).AddTicks(9255),
                            SaleID = 1,
                            Title = "Book 1"
                        },
                        new
                        {
                            BookID = 2,
                            CoverImage = "cover 2",
                            EpubLink = "EpubLink2",
                            IsActive = true,
                            NumberOfPage = 200,
                            PdfLink = "PdfLink 2",
                            Price = 20.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 109, DateTimeKind.Local).AddTicks(2595),
                            SaleID = 2,
                            Title = "Book 2"
                        },
                        new
                        {
                            BookID = 3,
                            CoverImage = "cover 3",
                            EpubLink = "EpubLink3",
                            IsActive = true,
                            NumberOfPage = 300,
                            PdfLink = "PdfLink 3",
                            Price = 30.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 120, DateTimeKind.Local).AddTicks(6107),
                            SaleID = 3,
                            Title = "Book 3"
                        },
                        new
                        {
                            BookID = 4,
                            CoverImage = "cover 4",
                            EpubLink = "EpubLink4",
                            IsActive = true,
                            NumberOfPage = 400,
                            PdfLink = "PdfLink 4",
                            Price = 40.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 131, DateTimeKind.Local).AddTicks(9766),
                            SaleID = 4,
                            Title = "Book 4"
                        },
                        new
                        {
                            BookID = 5,
                            CoverImage = "cover 5",
                            EpubLink = "EpubLink5",
                            IsActive = true,
                            NumberOfPage = 500,
                            PdfLink = "PdfLink 5",
                            Price = 50.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 143, DateTimeKind.Local).AddTicks(5263),
                            SaleID = 5,
                            Title = "Book 5"
                        },
                        new
                        {
                            BookID = 6,
                            CoverImage = "cover 6",
                            EpubLink = "EpubLink6",
                            IsActive = true,
                            NumberOfPage = 600,
                            PdfLink = "PdfLink 6",
                            Price = 60.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 155, DateTimeKind.Local).AddTicks(2635),
                            SaleID = 6,
                            Title = "Book 6"
                        },
                        new
                        {
                            BookID = 7,
                            CoverImage = "cover 7",
                            EpubLink = "EpubLink7",
                            IsActive = true,
                            NumberOfPage = 700,
                            PdfLink = "PdfLink 7",
                            Price = 70.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 166, DateTimeKind.Local).AddTicks(9477),
                            SaleID = 7,
                            Title = "Book 7"
                        },
                        new
                        {
                            BookID = 8,
                            CoverImage = "cover 8",
                            EpubLink = "EpubLink8",
                            IsActive = true,
                            NumberOfPage = 800,
                            PdfLink = "PdfLink 8",
                            Price = 80.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 178, DateTimeKind.Local).AddTicks(3832),
                            SaleID = 8,
                            Title = "Book 8"
                        },
                        new
                        {
                            BookID = 9,
                            CoverImage = "cover 9",
                            EpubLink = "EpubLink9",
                            IsActive = true,
                            NumberOfPage = 900,
                            PdfLink = "PdfLink 9",
                            Price = 90.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 189, DateTimeKind.Local).AddTicks(8238),
                            SaleID = 9,
                            Title = "Book 9"
                        },
                        new
                        {
                            BookID = 10,
                            CoverImage = "cover 10",
                            EpubLink = "EpubLink10",
                            IsActive = true,
                            NumberOfPage = 1000,
                            PdfLink = "PdfLink 10",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2023, 1, 16, 17, 40, 45, 201, DateTimeKind.Local).AddTicks(778),
                            SaleID = 10,
                            Title = "Book 10"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.CartItem", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookID = 1
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookID = 2
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookID = 3
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookID = 4
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookID = 5
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookID = 6
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookID = 7
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookID = 8
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookID = 9
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookID = 10
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            Name = "Genre 1"
                        },
                        new
                        {
                            GenreID = 2,
                            Name = "Genre 2"
                        },
                        new
                        {
                            GenreID = 3,
                            Name = "Genre 3"
                        },
                        new
                        {
                            GenreID = 4,
                            Name = "Genre 4"
                        },
                        new
                        {
                            GenreID = 5,
                            Name = "Genre 5"
                        },
                        new
                        {
                            GenreID = 6,
                            Name = "Genre 6"
                        },
                        new
                        {
                            GenreID = 7,
                            Name = "Genre 7"
                        },
                        new
                        {
                            GenreID = 8,
                            Name = "Genre 8"
                        },
                        new
                        {
                            GenreID = 9,
                            Name = "Genre 9"
                        },
                        new
                        {
                            GenreID = 10,
                            Name = "Genre 10"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.LibraryItem", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("LibraryItems");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookID = 1
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookID = 2
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookID = 3
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookID = 4
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookID = 5
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookID = 6
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookID = 7
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookID = 8
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookID = 9
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookID = 10
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalePercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SaleID");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleID = 1,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 97, DateTimeKind.Local).AddTicks(9219),
                            Name = "Sale 1",
                            SalePercent = 1.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 97, DateTimeKind.Local).AddTicks(9209)
                        },
                        new
                        {
                            SaleID = 2,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 109, DateTimeKind.Local).AddTicks(2553),
                            Name = "Sale 2",
                            SalePercent = 2.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 109, DateTimeKind.Local).AddTicks(2539)
                        },
                        new
                        {
                            SaleID = 3,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 120, DateTimeKind.Local).AddTicks(6072),
                            Name = "Sale 3",
                            SalePercent = 3.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 120, DateTimeKind.Local).AddTicks(6062)
                        },
                        new
                        {
                            SaleID = 4,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 131, DateTimeKind.Local).AddTicks(9722),
                            Name = "Sale 4",
                            SalePercent = 4.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 131, DateTimeKind.Local).AddTicks(9708)
                        },
                        new
                        {
                            SaleID = 5,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 143, DateTimeKind.Local).AddTicks(5210),
                            Name = "Sale 5",
                            SalePercent = 5.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 143, DateTimeKind.Local).AddTicks(5195)
                        },
                        new
                        {
                            SaleID = 6,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 155, DateTimeKind.Local).AddTicks(2596),
                            Name = "Sale 6",
                            SalePercent = 6.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 155, DateTimeKind.Local).AddTicks(2584)
                        },
                        new
                        {
                            SaleID = 7,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 166, DateTimeKind.Local).AddTicks(9436),
                            Name = "Sale 7",
                            SalePercent = 7.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 166, DateTimeKind.Local).AddTicks(9424)
                        },
                        new
                        {
                            SaleID = 8,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 178, DateTimeKind.Local).AddTicks(3795),
                            Name = "Sale 8",
                            SalePercent = 8.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 178, DateTimeKind.Local).AddTicks(3781)
                        },
                        new
                        {
                            SaleID = 9,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 189, DateTimeKind.Local).AddTicks(7977),
                            Name = "Sale 9",
                            SalePercent = 9.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 189, DateTimeKind.Local).AddTicks(7954)
                        },
                        new
                        {
                            SaleID = 10,
                            EndDate = new DateTime(2023, 1, 16, 17, 40, 45, 201, DateTimeKind.Local).AddTicks(731),
                            Name = "Sale 10",
                            SalePercent = 10.0,
                            StartDate = new DateTime(2023, 1, 16, 17, 40, 45, 201, DateTimeKind.Local).AddTicks(715)
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57a0946d-35ca-4fad-b4a7-da2885ac17ba",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 1",
                            IsActive = true,
                            LastName = "Ho 1",
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMCSJChYYAl479D9dpX/JN58HBIr1c1KNv48EMoaGF+19zFQHl5ChrAVzpI3lpvxg==",
                            PhoneNumber = "123456781",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37ef0fd2-e002-4499-a4e5-f840cd4120dc",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 2",
                            IsActive = true,
                            LastName = "Ho 2",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "user2",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0BtXEYQgq/v5/mIrG0jPfh74nepG34p3yuzPPU6cFYR6xeEw0ahmtvgYF5op3c+A==",
                            PhoneNumber = "123456782",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bbfb514-4d46-468b-bf0d-c485eb21ba95",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 3",
                            IsActive = true,
                            LastName = "Ho 3",
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@gmail.com",
                            NormalizedUserName = "user3",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3fV+VziGDSKzXyeF4uqq2FRnvxjGISx3hNd3/NkmNSPVB5SGUwAdjrQUKhm8F28g==",
                            PhoneNumber = "123456783",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd0a4c7d-786d-404a-a771-01facc95ee40",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 4",
                            IsActive = true,
                            LastName = "Ho 4",
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@gmail.com",
                            NormalizedUserName = "user4",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8tyQ+x1qzt31d9Xc4WK4YWRIwen8ux8u2YUNAA1hL5Cxx3UTVpToOle0wKJ/bTBQ==",
                            PhoneNumber = "123456784",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e31caea0-88a1-4f7d-85f1-a4263e1885c8",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 5",
                            IsActive = true,
                            LastName = "Ho 5",
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@gmail.com",
                            NormalizedUserName = "user5",
                            PasswordHash = "AQAAAAEAACcQAAAAELqncIoCR7QsvdveOxmwnRiqBl+Kq281AH3CRJJt2KSXSlJNoMIyRWXapQeTLbewXQ==",
                            PhoneNumber = "123456785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98340213-2397-44c4-8b30-5e5dea77f2b5",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 6",
                            IsActive = true,
                            LastName = "Ho 6",
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@gmail.com",
                            NormalizedUserName = "user6",
                            PasswordHash = "AQAAAAEAACcQAAAAEMKaox9T06YOdqE8h7kPOaiOtrlFwECh92pErjgUB3hDZIlK49c2jm4Afjjd1Ibb5w==",
                            PhoneNumber = "123456786",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "182cac94-b1e8-45d9-bb13-d956fe50f4d1",
                            Email = "user7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 7",
                            IsActive = true,
                            LastName = "Ho 7",
                            LockoutEnabled = false,
                            NormalizedEmail = "user7@gmail.com",
                            NormalizedUserName = "user7",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVyi6V0Apusx1wejKgxjBtt3fGq3ZSy8SnJH3rxowHFN+Koc0MfrdbcvxI+Kwi5Aw==",
                            PhoneNumber = "123456787",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "798e00ae-1e1b-455b-b9f0-3a8177645925",
                            Email = "user8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 8",
                            IsActive = true,
                            LastName = "Ho 8",
                            LockoutEnabled = false,
                            NormalizedEmail = "user8@gmail.com",
                            NormalizedUserName = "user8",
                            PasswordHash = "AQAAAAEAACcQAAAAEPEfOVqwiwLUo2tv9L4abLBpsVXKsun3126qEHH0A6bWBNij3aKLyempyIkxzViCRQ==",
                            PhoneNumber = "123456788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2282cad-293a-4b72-8a50-b4afde18de0f",
                            Email = "user9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 9",
                            IsActive = true,
                            LastName = "Ho 9",
                            LockoutEnabled = false,
                            NormalizedEmail = "user9@gmail.com",
                            NormalizedUserName = "user9",
                            PasswordHash = "AQAAAAEAACcQAAAAED71yVy+xY670VVJ+KO4tKDvEzNSN0q7TI+3qbQwSlwVJ6ZwRTNSoPrHSVc6P2WaQw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4052923-2e70-4fa0-bee5-29f87f86d1fc",
                            Email = "user10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 10",
                            IsActive = true,
                            LastName = "Ho 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "user10@gmail.com",
                            NormalizedUserName = "user10",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvYXztpPydXLFCQba9QjbKxqTJXwmMWaZHMMp6Qxu+ucDQ5GiDgTwy+ywXUh1tUzA==",
                            PhoneNumber = "1234567810",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.WishItem", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("WishItems");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookID = 1
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookID = 2
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookID = 3
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookID = 4
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookID = 5
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookID = 6
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookID = 7
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookID = 8
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookID = 9
                        },
                        new
                        {
                            UserID = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookID = 10
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            RoleId = new Guid("423e533c-d43d-4fd9-9676-e31af724522a")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Sale", "Sale")
                        .WithMany("OnSaleBooks")
                        .HasForeignKey("SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.CartItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("Shoppers")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.LibraryItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("Owners")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("Library")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.WishItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("Wisher")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("WishList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.Navigation("Owners");

                    b.Navigation("Shoppers");

                    b.Navigation("Wisher");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Sale", b =>
                {
                    b.Navigation("OnSaleBooks");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Library");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
