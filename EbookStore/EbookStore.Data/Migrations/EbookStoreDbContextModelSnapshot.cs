// <auto-generated />
using System;
using EbookStore.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EbookStore.Data.Migrations
{
    [DbContext(typeof(EbookStoreDbContext))]
    partial class EbookStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EbookStore.Contract.Model.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("423e533c-d43d-4fd9-9676-e31af724522a"),
                            ConcurrencyStamp = "8e5907ff-d9e5-4f00-860d-55e7d200acd2",
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19"),
                            ConcurrencyStamp = "1ecbcad1-dcbe-4718-b2d7-868133616910",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EpubLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPage")
                        .HasColumnType("int");

                    b.Property<string>("PdfLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("SaleId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CoverImage = "cover 1",
                            Description = "Description 1",
                            EpubLink = "EpubLink1",
                            IsActive = true,
                            NumberOfPage = 100,
                            PdfLink = "PdfLink 1",
                            Price = 10.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(205),
                            SaleId = 2,
                            Title = "Book 1"
                        },
                        new
                        {
                            BookId = 2,
                            CoverImage = "cover 2",
                            Description = "Description 2",
                            EpubLink = "EpubLink2",
                            IsActive = true,
                            NumberOfPage = 200,
                            PdfLink = "PdfLink 2",
                            Price = 20.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(226),
                            SaleId = 3,
                            Title = "Book 2"
                        },
                        new
                        {
                            BookId = 3,
                            CoverImage = "cover 3",
                            Description = "Description 3",
                            EpubLink = "EpubLink3",
                            IsActive = true,
                            NumberOfPage = 300,
                            PdfLink = "PdfLink 3",
                            Price = 30.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(312),
                            SaleId = 1,
                            Title = "Book 3"
                        },
                        new
                        {
                            BookId = 4,
                            CoverImage = "cover 4",
                            Description = "Description 4",
                            EpubLink = "EpubLink4",
                            IsActive = true,
                            NumberOfPage = 400,
                            PdfLink = "PdfLink 4",
                            Price = 40.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(333),
                            Title = "Book 4"
                        },
                        new
                        {
                            BookId = 5,
                            CoverImage = "cover 5",
                            Description = "Description 5",
                            EpubLink = "EpubLink5",
                            IsActive = true,
                            NumberOfPage = 500,
                            PdfLink = "PdfLink 5",
                            Price = 50.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(350),
                            SaleId = 3,
                            Title = "Book 5"
                        },
                        new
                        {
                            BookId = 6,
                            CoverImage = "cover 6",
                            Description = "Description 6",
                            EpubLink = "EpubLink6",
                            IsActive = true,
                            NumberOfPage = 600,
                            PdfLink = "PdfLink 6",
                            Price = 60.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(369),
                            SaleId = 1,
                            Title = "Book 6"
                        },
                        new
                        {
                            BookId = 7,
                            CoverImage = "cover 7",
                            Description = "Description 7",
                            EpubLink = "EpubLink7",
                            IsActive = true,
                            NumberOfPage = 700,
                            PdfLink = "PdfLink 7",
                            Price = 70.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(385),
                            SaleId = 2,
                            Title = "Book 7"
                        },
                        new
                        {
                            BookId = 8,
                            CoverImage = "cover 8",
                            Description = "Description 8",
                            EpubLink = "EpubLink8",
                            IsActive = true,
                            NumberOfPage = 800,
                            PdfLink = "PdfLink 8",
                            Price = 80.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(401),
                            Title = "Book 8"
                        },
                        new
                        {
                            BookId = 9,
                            CoverImage = "cover 9",
                            Description = "Description 9",
                            EpubLink = "EpubLink9",
                            IsActive = true,
                            NumberOfPage = 900,
                            PdfLink = "PdfLink 9",
                            Price = 90.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(416),
                            SaleId = 1,
                            Title = "Book 9"
                        },
                        new
                        {
                            BookId = 10,
                            CoverImage = "cover 10",
                            Description = "Description 10",
                            EpubLink = "EpubLink10",
                            IsActive = true,
                            NumberOfPage = 1000,
                            PdfLink = "PdfLink 10",
                            Price = 100.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(435),
                            SaleId = 2,
                            Title = "Book 10"
                        },
                        new
                        {
                            BookId = 11,
                            CoverImage = "cover 11",
                            Description = "Description 11",
                            EpubLink = "EpubLink11",
                            IsActive = true,
                            NumberOfPage = 1100,
                            PdfLink = "PdfLink 11",
                            Price = 110.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(451),
                            SaleId = 3,
                            Title = "Book 11"
                        },
                        new
                        {
                            BookId = 12,
                            CoverImage = "cover 12",
                            Description = "Description 12",
                            EpubLink = "EpubLink12",
                            IsActive = true,
                            NumberOfPage = 1200,
                            PdfLink = "PdfLink 12",
                            Price = 120.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(468),
                            Title = "Book 12"
                        },
                        new
                        {
                            BookId = 13,
                            CoverImage = "cover 13",
                            Description = "Description 13",
                            EpubLink = "EpubLink13",
                            IsActive = true,
                            NumberOfPage = 1300,
                            PdfLink = "PdfLink 13",
                            Price = 130.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(484),
                            SaleId = 2,
                            Title = "Book 13"
                        },
                        new
                        {
                            BookId = 14,
                            CoverImage = "cover 14",
                            Description = "Description 14",
                            EpubLink = "EpubLink14",
                            IsActive = true,
                            NumberOfPage = 1400,
                            PdfLink = "PdfLink 14",
                            Price = 140.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(500),
                            SaleId = 3,
                            Title = "Book 14"
                        },
                        new
                        {
                            BookId = 15,
                            CoverImage = "cover 15",
                            Description = "Description 15",
                            EpubLink = "EpubLink15",
                            IsActive = true,
                            NumberOfPage = 1500,
                            PdfLink = "PdfLink 15",
                            Price = 150.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(516),
                            SaleId = 1,
                            Title = "Book 15"
                        },
                        new
                        {
                            BookId = 16,
                            CoverImage = "cover 16",
                            Description = "Description 16",
                            EpubLink = "EpubLink16",
                            IsActive = true,
                            NumberOfPage = 1600,
                            PdfLink = "PdfLink 16",
                            Price = 160.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(593),
                            Title = "Book 16"
                        },
                        new
                        {
                            BookId = 17,
                            CoverImage = "cover 17",
                            Description = "Description 17",
                            EpubLink = "EpubLink17",
                            IsActive = true,
                            NumberOfPage = 1700,
                            PdfLink = "PdfLink 17",
                            Price = 170.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(614),
                            SaleId = 3,
                            Title = "Book 17"
                        },
                        new
                        {
                            BookId = 18,
                            CoverImage = "cover 18",
                            Description = "Description 18",
                            EpubLink = "EpubLink18",
                            IsActive = true,
                            NumberOfPage = 1800,
                            PdfLink = "PdfLink 18",
                            Price = 180.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(633),
                            SaleId = 1,
                            Title = "Book 18"
                        },
                        new
                        {
                            BookId = 19,
                            CoverImage = "cover 19",
                            Description = "Description 19",
                            EpubLink = "EpubLink19",
                            IsActive = true,
                            NumberOfPage = 1900,
                            PdfLink = "PdfLink 19",
                            Price = 190.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(650),
                            SaleId = 2,
                            Title = "Book 19"
                        },
                        new
                        {
                            BookId = 20,
                            CoverImage = "cover 20",
                            Description = "Description 20",
                            EpubLink = "EpubLink20",
                            IsActive = true,
                            NumberOfPage = 2000,
                            PdfLink = "PdfLink 20",
                            Price = 200.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(667),
                            Title = "Book 20"
                        },
                        new
                        {
                            BookId = 21,
                            CoverImage = "cover 21",
                            Description = "Description 21",
                            EpubLink = "EpubLink21",
                            IsActive = true,
                            NumberOfPage = 2100,
                            PdfLink = "PdfLink 21",
                            Price = 210.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(682),
                            SaleId = 1,
                            Title = "Book 21"
                        },
                        new
                        {
                            BookId = 22,
                            CoverImage = "cover 22",
                            Description = "Description 22",
                            EpubLink = "EpubLink22",
                            IsActive = true,
                            NumberOfPage = 2200,
                            PdfLink = "PdfLink 22",
                            Price = 220.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(698),
                            SaleId = 2,
                            Title = "Book 22"
                        },
                        new
                        {
                            BookId = 23,
                            CoverImage = "cover 23",
                            Description = "Description 23",
                            EpubLink = "EpubLink23",
                            IsActive = true,
                            NumberOfPage = 2300,
                            PdfLink = "PdfLink 23",
                            Price = 230.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(714),
                            SaleId = 3,
                            Title = "Book 23"
                        },
                        new
                        {
                            BookId = 24,
                            CoverImage = "cover 24",
                            Description = "Description 24",
                            EpubLink = "EpubLink24",
                            IsActive = true,
                            NumberOfPage = 2400,
                            PdfLink = "PdfLink 24",
                            Price = 240.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(730),
                            Title = "Book 24"
                        },
                        new
                        {
                            BookId = 25,
                            CoverImage = "cover 25",
                            Description = "Description 25",
                            EpubLink = "EpubLink25",
                            IsActive = true,
                            NumberOfPage = 2500,
                            PdfLink = "PdfLink 25",
                            Price = 250.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(746),
                            SaleId = 2,
                            Title = "Book 25"
                        },
                        new
                        {
                            BookId = 26,
                            CoverImage = "cover 26",
                            Description = "Description 26",
                            EpubLink = "EpubLink26",
                            IsActive = true,
                            NumberOfPage = 2600,
                            PdfLink = "PdfLink 26",
                            Price = 260.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(761),
                            SaleId = 3,
                            Title = "Book 26"
                        },
                        new
                        {
                            BookId = 27,
                            CoverImage = "cover 27",
                            Description = "Description 27",
                            EpubLink = "EpubLink27",
                            IsActive = true,
                            NumberOfPage = 2700,
                            PdfLink = "PdfLink 27",
                            Price = 270.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(843),
                            SaleId = 1,
                            Title = "Book 27"
                        },
                        new
                        {
                            BookId = 28,
                            CoverImage = "cover 28",
                            Description = "Description 28",
                            EpubLink = "EpubLink28",
                            IsActive = true,
                            NumberOfPage = 2800,
                            PdfLink = "PdfLink 28",
                            Price = 280.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(861),
                            Title = "Book 28"
                        },
                        new
                        {
                            BookId = 29,
                            CoverImage = "cover 29",
                            Description = "Description 29",
                            EpubLink = "EpubLink29",
                            IsActive = true,
                            NumberOfPage = 2900,
                            PdfLink = "PdfLink 29",
                            Price = 290.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(877),
                            SaleId = 3,
                            Title = "Book 29"
                        },
                        new
                        {
                            BookId = 30,
                            CoverImage = "cover 30",
                            Description = "Description 30",
                            EpubLink = "EpubLink30",
                            IsActive = true,
                            NumberOfPage = 3000,
                            PdfLink = "PdfLink 30",
                            Price = 300.0,
                            ReleaseDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(893),
                            SaleId = 1,
                            Title = "Book 30"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 11,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 21,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 12,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 22,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 13,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 23,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 14,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 24,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 5
                        },
                        new
                        {
                            BookId = 15,
                            GenreId = 5
                        },
                        new
                        {
                            BookId = 25,
                            GenreId = 5
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 6
                        },
                        new
                        {
                            BookId = 16,
                            GenreId = 6
                        },
                        new
                        {
                            BookId = 26,
                            GenreId = 6
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 7
                        },
                        new
                        {
                            BookId = 17,
                            GenreId = 7
                        },
                        new
                        {
                            BookId = 27,
                            GenreId = 7
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 8
                        },
                        new
                        {
                            BookId = 18,
                            GenreId = 8
                        },
                        new
                        {
                            BookId = 28,
                            GenreId = 8
                        },
                        new
                        {
                            BookId = 9,
                            GenreId = 9
                        },
                        new
                        {
                            BookId = 19,
                            GenreId = 9
                        },
                        new
                        {
                            BookId = 29,
                            GenreId = 9
                        },
                        new
                        {
                            BookId = 10,
                            GenreId = 10
                        },
                        new
                        {
                            BookId = 20,
                            GenreId = 10
                        },
                        new
                        {
                            BookId = 30,
                            GenreId = 10
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.CartItem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookId = 1,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookId = 2,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookId = 3,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookId = 4,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookId = 5,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookId = 6,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookId = 7,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookId = 8,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookId = 9,
                            IsActive = false
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookId = 10,
                            IsActive = false
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Genre 1"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Genre 2"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Genre 3"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Genre 4"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Genre 5"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Genre 6"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Genre 7"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Genre 8"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Genre 9"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Genre 10"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.LibraryItem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("LibraryItems");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookId = 1
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookId = 2
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookId = 3
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookId = 4
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookId = 5
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookId = 6
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookId = 7
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookId = 8
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookId = 9
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookId = 10
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalePercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SaleId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(3),
                            Name = "Sale 1",
                            SalePercent = 1.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 316, DateTimeKind.Local).AddTicks(9986)
                        },
                        new
                        {
                            SaleId = 2,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(28),
                            Name = "Sale 2",
                            SalePercent = 2.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(27)
                        },
                        new
                        {
                            SaleId = 3,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(44),
                            Name = "Sale 3",
                            SalePercent = 3.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(43)
                        },
                        new
                        {
                            SaleId = 4,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(63),
                            Name = "Sale 4",
                            SalePercent = 4.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(61)
                        },
                        new
                        {
                            SaleId = 5,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(98),
                            Name = "Sale 5",
                            SalePercent = 5.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(97)
                        },
                        new
                        {
                            SaleId = 6,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(119),
                            Name = "Sale 6",
                            SalePercent = 6.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(118)
                        },
                        new
                        {
                            SaleId = 7,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(133),
                            Name = "Sale 7",
                            SalePercent = 7.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(132)
                        },
                        new
                        {
                            SaleId = 8,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(147),
                            Name = "Sale 8",
                            SalePercent = 8.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(147)
                        },
                        new
                        {
                            SaleId = 9,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(162),
                            Name = "Sale 9",
                            SalePercent = 9.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(161)
                        },
                        new
                        {
                            SaleId = 10,
                            EndDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(179),
                            Name = "Sale 10",
                            SalePercent = 10.0,
                            StartDate = new DateTime(2023, 2, 23, 14, 38, 42, 317, DateTimeKind.Local).AddTicks(178)
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd5004cc-0ce3-427a-8934-d791e8f5405f",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 1",
                            IsActive = true,
                            LastName = "Ho 1",
                            LockoutEnabled = false,
                            NormalizedEmail = "user1@gmail.com",
                            NormalizedUserName = "user1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPpfg2n/Rpic11CX59eCLmkpvT3hcBLUlYTx9COyeeQWLcpEsqiLbdre8TeWWe8CBg==",
                            PhoneNumber = "123456781",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b986c06-22b6-4df2-a044-eff8d92ebe2f",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 2",
                            IsActive = true,
                            LastName = "Ho 2",
                            LockoutEnabled = false,
                            NormalizedEmail = "user2@gmail.com",
                            NormalizedUserName = "user2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGMR1gbbj1JmB1wFhpHvjlZ08lUHmZ4alDGcYLhLHnEEUCbGo4RBFRHajO2s1gOHtw==",
                            PhoneNumber = "123456782",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d17df1be-5847-471b-99e9-b6840af91355",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 3",
                            IsActive = true,
                            LastName = "Ho 3",
                            LockoutEnabled = false,
                            NormalizedEmail = "user3@gmail.com",
                            NormalizedUserName = "user3",
                            PasswordHash = "AQAAAAEAACcQAAAAEA3Y07AgXM6sUy+4dP4fle2/5qmV8BdWQw+BiXjHgL6rocFI+y9C53OPWtYFoYKI+A==",
                            PhoneNumber = "123456783",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e113c91a-9a2f-409a-bb6b-3707a84ad7f7",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 4",
                            IsActive = true,
                            LastName = "Ho 4",
                            LockoutEnabled = false,
                            NormalizedEmail = "user4@gmail.com",
                            NormalizedUserName = "user4",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkGNsHgZ+wpx5+78HpzyjrNl7qE8ec0u3Xs9RXF4d/IGFXDJKwUwyDn1MYq5s4rAw==",
                            PhoneNumber = "123456784",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd1769ce-afa3-46ed-a485-6c6c52d1fdf0",
                            Email = "user5@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 5",
                            IsActive = true,
                            LastName = "Ho 5",
                            LockoutEnabled = false,
                            NormalizedEmail = "user5@gmail.com",
                            NormalizedUserName = "user5",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTiQiBJxWFI6rUBrcxJDYS47zTzM49onALGebrxkMM82vwShO9qgATafHHNrthMlA==",
                            PhoneNumber = "123456785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11f274ac-e3f6-45f1-b926-71eeecaa96fa",
                            Email = "user6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 6",
                            IsActive = true,
                            LastName = "Ho 6",
                            LockoutEnabled = false,
                            NormalizedEmail = "user6@gmail.com",
                            NormalizedUserName = "user6",
                            PasswordHash = "AQAAAAEAACcQAAAAEME4mrzYuWa7GegThDrUu5C60Di2bEz0fAtija0Yydm1u8ZgAUdR30NfoS8InNz2ZQ==",
                            PhoneNumber = "123456786",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0a28324-65cf-4b24-92dd-caf65d49bec5",
                            Email = "user7@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 7",
                            IsActive = true,
                            LastName = "Ho 7",
                            LockoutEnabled = false,
                            NormalizedEmail = "user7@gmail.com",
                            NormalizedUserName = "user7",
                            PasswordHash = "AQAAAAEAACcQAAAAEMK2kpurY70ZHCziYzstxc5r/lne4ssHNjhBtXlwcdaMaMqLVvRjGwOWohhjIIBNOw==",
                            PhoneNumber = "123456787",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d2176ef-20a8-4ed4-8c14-98773e27b6fc",
                            Email = "user8@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 8",
                            IsActive = true,
                            LastName = "Ho 8",
                            LockoutEnabled = false,
                            NormalizedEmail = "user8@gmail.com",
                            NormalizedUserName = "user8",
                            PasswordHash = "AQAAAAEAACcQAAAAEFhi6/RtNFC0Ps/DuQcvAsqnc7qZnOoPin7Kl08nnJzcnD6JitMbeYVRZQxZ/yG9+g==",
                            PhoneNumber = "123456788",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43d392b2-dfea-46dc-99a7-da0ac740ca2d",
                            Email = "user9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 9",
                            IsActive = true,
                            LastName = "Ho 9",
                            LockoutEnabled = false,
                            NormalizedEmail = "user9@gmail.com",
                            NormalizedUserName = "user9",
                            PasswordHash = "AQAAAAEAACcQAAAAEFSQyeEDFmWw+QWkdBcWtm7A55fAnkDWPQXcl79z9BDp7UHapVshIufQWGx2pQW2uQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fedf1872-929b-425b-9c05-4933c95dded0",
                            Email = "user10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ten 10",
                            IsActive = true,
                            LastName = "Ho 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "user10@gmail.com",
                            NormalizedUserName = "user10",
                            PasswordHash = "AQAAAAEAACcQAAAAEIWYX98zfyLEvQpkHyta3JC4cm+QeIzC66nhpKSatxsQCSwxpDEVT4yLgFWg0eD+9Q==",
                            PhoneNumber = "1234567810",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("EbookStore.Contract.Model.WishItem", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("WishItems");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            BookId = 1,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            BookId = 2,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            BookId = 3,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            BookId = 4,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            BookId = 5,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            BookId = 6,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            BookId = 7,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            BookId = 8,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            BookId = 9,
                            IsActive = true
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            BookId = 10,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef60"),
                            RoleId = new Guid("423e533c-d43d-4fd9-9676-e31af724522a")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef61"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef62"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef63"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef64"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef65"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef66"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef67"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef68"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        },
                        new
                        {
                            UserId = new Guid("6baa519d-aaed-4190-a3c9-3c8f67ecef69"),
                            RoleId = new Guid("da35db1a-5b54-4618-884e-bcd7f7b1dd19")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Sale", "Sale")
                        .WithMany("Books")
                        .HasForeignKey("SaleId");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.BookGenre", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", null)
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.Genre", null)
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EbookStore.Contract.Model.CartItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("CartItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.LibraryItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("LibraryItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("LibraryItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.WishItem", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.Book", "Book")
                        .WithMany("WishItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", "User")
                        .WithMany("WishItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EbookStore.Contract.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Book", b =>
                {
                    b.Navigation("BookGenres");

                    b.Navigation("CartItems");

                    b.Navigation("LibraryItems");

                    b.Navigation("WishItems");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.Sale", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EbookStore.Contract.Model.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("LibraryItems");

                    b.Navigation("WishItems");
                });
#pragma warning restore 612, 618
        }
    }
}
